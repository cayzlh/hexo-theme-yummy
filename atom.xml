<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yummy Demo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-16T13:03:49.146Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot单元测试</title>
    <link href="http://example.com/2021/03/12/SpringBoot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://example.com/2021/03/12/SpringBoot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</id>
    <published>2021-03-12T06:02:10.000Z</published>
    <updated>2021-04-16T13:03:49.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-单元测试的概念"><a href="#一、-单元测试的概念" class="headerlink" title="一、 单元测试的概念"></a>一、 单元测试的概念</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a><strong>概念：</strong></h3><ol><li>单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。在Java中单元测试的最小单元是类。</li><li>单元测试是开发者编写的一小段代码，用于检验被测代码的一个很小的、很明确的功能是否正确。执行单元测试，就是为了证明这 段代码的行为和我们期望是否一致。</li></ol><h3 id="单元测试引用："><a href="#单元测试引用：" class="headerlink" title="单元测试引用："></a><strong>单元测试引用：</strong></h3><ol><li>众所周知，通过spring initialize创建的Spring Boot项目会在Maven中自动携带很多starter依赖：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/cayzlh/git-img-repository@master/2021/03/14044716155290871615529087504.jpg" alt="图片"></p><p>其中包含了一个名为<code>spring-boot-starter-test</code>的依赖，本文是围绕这个依赖展开。</p><ol><li>Spring Boot中引入单元测试很简单，添加如下依赖（即<code>spring-boot-starter-test</code>依赖）：</li></ol><pre><code>&lt;dependency&gt;  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;  &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;</code></pre><ol><li>spring-boot-starter-test有如下几个库：</li></ol><p><code>spring-boot-starter-test</code>UML图：</p><p><img src="https://7.dusays.com/2021/03/12/208e02005c0b7.png" alt="image-20210312142854430"></p><p><img src="https://7.dusays.com/2021/03/12/23696982579aa.png" alt="image-20210312142907488"></p><h2 id="二、单元测试的作用"><a href="#二、单元测试的作用" class="headerlink" title="二、单元测试的作用"></a>二、单元测试的作用</h2><p>在没有接触单元测试之前我们是怎么做测试的？一般有两个方法：</p><p><img src="https://cdn.jsdelivr.net/gh/cayzlh/git-img-repository@master/2021/03/14044716155290871615529087678.jpg" alt="图片"></p><p>在时间允许的情况下，编写单元测试是程序员对代码的自测，这是对自己代码的负责。</p><h3 id="写单元测试的两个动机："><a href="#写单元测试的两个动机：" class="headerlink" title="写单元测试的两个动机："></a><strong>写单元测试的两个动机：</strong></h3><ol><li>保证或验证实现功能。</li><li>保护已经实现的功能不被破坏。</li></ol><h2 id="三、Spring-Boot引入的MockMvc的概念"><a href="#三、Spring-Boot引入的MockMvc的概念" class="headerlink" title="三、Spring Boot引入的MockMvc的概念"></a>三、Spring Boot引入的MockMvc的概念</h2><ol><li>什么是Mock?</li></ol><p>在面向对象的程序设计中，模拟对象（英语：mock object）是以可控的方式模拟真实对象行为的假对象。在编程过程中，通常通过模拟一些输入数据，来验证程序是否达到预期结果。</p><ol><li>为什么使用Mock对象？</li></ol><p>使用模拟对象，可以模拟复杂的、真实的对象行为。如果在单元测试中无法使用真实对象，可采用模拟对象进行替代。</p><ol><li>MockMvc的概念</li></ol><p>MockMvc是由spring-test包提供，实现了对Http请求的模拟，能够直接使用网络的形式，转换到Controller的调用，使得测试速度快、不依赖网络环境。同时提供了一套验证的工具，结果的验证十分方便。</p><p>接口MockMvcBuilder，提供一个唯一的build方法，用来构造MockMvc。主要有两个实现：StandaloneMockMvcBuilder和DefaultMockMvcBuilder。</p><p><img src="https://7.dusays.com/2021/03/12/8ca41b998aaab.png" alt="image-20210312142923082"></p><ol><li>MockMVC的基本步骤</li></ol><p>(1) mockMvc.perform执行一个请求。(2) MockMvcRequestBuilders.get(“XXX”)构造一个请求。(3) ResultActions.param添加请求传值 (4) ResultActions.accept()设置返回类型 (5) ResultActions.andExpect添加执行完成后的断言。(6) ResultActions.andDo添加一个结果处理器，表示要对结果做点什么事情，比如处使用print()输出整个响应结果信息。(7) ResultActions.andReturn表示执行完成后返回相应的结果。</p><h2 id="四、Service层的单元测试"><a href="#四、Service层的单元测试" class="headerlink" title="四、Service层的单元测试"></a>四、Service层的单元测试</h2><p><strong>第一步：</strong> Spring Boot中单元测试类写在src/test/java目录下，你可以手动创建具体测试类，也可以通过IDEA自动创建测试类，如下图：（注：点选并打开相应代码界面，再点击菜单栏的Navigate）</p><p><img src="https://7.dusays.com/2021/03/12/b9128a7d66811.png" alt="image-20210312140744322"></p><p><strong>第二步：</strong> 按照第一步的方法，点击测试后，出现<strong>图一</strong> 的对话框（如果想要测试的类已经存在测试类了会被列出来，也可以重新创建一个新的测试类），点击”Create New Test…”会弹出<strong>图二</strong> 的对话框，可以选择是否生成setUp以及要测试的成员方法等：</p><p>图一</p><p><img src="https://cdn.jsdelivr.net/gh/cayzlh/git-img-repository@master/2021/03/14044716155290871615529087979.jpg" alt="图片"></p><p>图二</p><p><img src="https://cdn.jsdelivr.net/gh/cayzlh/git-img-repository@master/2021/03/14044816155290881615529088115.jpg" alt="图片"></p><p><strong>第三步：</strong> 至此Service层的测试类就创建好了，测试类自动生成到了src/test/java目录下<strong>项目的同级目录中</strong> ，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/cayzlh/git-img-repository@master/2021/03/14044816155290881615529088185.jpg" alt="图片"></p><p>Service层测试代码如下：</p><pre><code>@SpringBootTest@RunWith(SpringRunner.class)public class XXXServiceTest &#123;@Resourceprivate XXXService XXXService;@Testpublic void conflictTime() &#123;        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;);        LocalDate start = LocalDate.parse(&quot;2020-10-26&quot;, dtf);        LocalDate end = LocalDate.parse(&quot;2020-10-31&quot;, dtf);        Integer integer = XXXService.ConflictTime(&quot;10000001&quot;, start, end);        Assert.assertThat(integer, Matchers.notNullValue());//assertThat断言后面介绍   &#125;&#125;</code></pre><p><strong>注解解释：</strong></p><p><code>@SpringBootTest</code>：获取启动类，加载配置，寻找主配置启动类（被 @SpringBootApplication 注解的） <code>@RunWith(SpringRunner.class)</code>：让JUnit运行Spring的测试环境,获得Spring环境的上下文的支持</p><h2 id="五、Controller层的单元测试"><a href="#五、Controller层的单元测试" class="headerlink" title="五、Controller层的单元测试"></a>五、Controller层的单元测试</h2><p>创建测试类步骤见第四部分，此处略。</p><p>第四部分只是针对Service层做了测试，但是咱么也需要对Controller层（API）做测试，这时候就用到MockMvc了，它使得你无需启动项目工程就能测试这些接口</p><p>MockMvc实现了对Http请求的模拟，能够直接使用网络的形式，转换到Controller的调用，这样可以使得测试速度快、不依赖网络环境，而且提供了一套验证的工具，这样可以使得请求的验证统一而且很方便。</p><p>Controller层部分的代码将分为三个代码块讲解，里面有看不懂的代码先不要着急哦😄，会在第五部分结尾处给大家汇总解答的，大家要坚持看到最后哟！😁</p><p><strong>代码块一：</strong></p><pre><code>@SpringBootTest@RunWith(SpringRunner.class)@AutoConfigureMockMvcpublic class DfTaskRecordControllerTest &#123;@Autowiredprivate MockMvc mockMvc;@Beforepublic void setUp() throws Exception &#123;       System.out.println(&quot;---------------start---------------&quot;);       save();get();       System.out.println(&quot;================end================&quot;);    &#125;</code></pre><p><strong>注解解释：</strong></p><p><code>@SpringBootTest</code>&gt;：获取启动类，加载配置，寻找主配置启动类（被 @SpringBootApplication 注解的）</p><p><code>@RunWith(SpringRunner.class)</code>&gt;：让JUnit运行Spring的测试环境,获得Spring环境的上下文的支持 <code>@AutoConfigureMockMvc</code>：用于自动配置MockMvc,配置后MockMvc类可以直接注入,相当于new MockMvc <code>@Before</code>:初始化方法 ,对于每一个测试方法都要执行一次</p><p><strong>代码块二：</strong></p><pre><code>@Test@Transactional@Rollback()public void save() throws Exception &#123;        String json&quot;&#123;……&#125;&quot;;//执行一个RequestBuilder请求，会自动执行SpringMVC的流程并映射到相应的控制器执行处理；        mockMvc.perform(MockMvcRequestBuilders                .post(&quot;/XXX/save&quot;)                .content(json.getBytes()) //传json参数                .accept(MediaType.APPLICATION_JSON)                .contentType(MediaType.APPLICATION_JSON_VALUE)                .header(&quot;Authorization&quot;,&quot;Bearer ********-****-****-****-************&quot;)        )                .andExpect(MockMvcResultMatchers.status().isOk())                .andDo(print());    &#125;</code></pre><p><strong>注解解释：</strong></p><p><code>@Transactional</code>:开启事务功能</p><p><code>@Rollback()</code>: 事务回滚,默认是true</p><p><strong>代码块三：</strong></p><pre><code>@Testpublic void get() throws Exception&#123;        ResultActions resultActions = mockMvc.perform(MockMvcRequestBuilders                .get(&quot;/XXX/get&quot;)                .param(&quot;id&quot;, &quot;**********&quot;)                .header(&quot;Authorization&quot;, &quot;Bearer ********-****-****-****-************&quot;)        );        resultActions.andReturn().getResponse().setCharacterEncoding(&quot;UTF-8&quot;);        resultActions.andExpect(MockMvcResultMatchers.status().isOk()).andDo(print());    &#125;&#125;</code></pre><p><code>/get</code>运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/cayzlh/git-img-repository@master/2021/03/14044816155290881615529088275.jpg" alt="图片"></p><p><strong>现在将上面的一些琐碎的知识点汇总一下：</strong></p><p><code>1. mockMvc.perform</code>：执行一个请求</p><p><code>2. MockMvcRequestBuilders.get(“/XXX/get”)</code>：构造一个请求，Post请求使用.post方法</p><p><code>3. contentType(MediaType.APPLICATION_JSON_VALUE)</code>：代表发送端发送的数据格式是application/json;charset=UTF-8</p><p><code>4. accept(MediaType.APPLICATION_JSON)</code>：代表客户端希望接受的数据类型为application/json;charset=UTF-8</p><p><code>5. header(“Authorization”,“Bearer XXXX”)</code>：代表在报文头添加一些必须的信息，这里添加的是token</p><p><code>6. ResultActions.andExpect</code>：添加执行完成后的断言</p><p><code>7. ResultActions.andExpect(MockMvcResultMatchers.status().isOk())</code>：方法看请求的状态响应码是否为200如果不是则抛异常，测试不通过</p><p><code>8. ResultActions.andDo</code>：添加一个结果处理器，表示要对结果做点什么事情，比如此处使用print()：输出整个响应结果信息</p><h2 id="六、断言的概念"><a href="#六、断言的概念" class="headerlink" title="六、断言的概念"></a>六、断言的概念</h2><ol><li>断言（assert），是编程术语，表示为一些布尔表达式，程序员相信在程序中的某个特定点该表达式值为真。可以在任何时候启用和禁用断言验证，因此可以在测试时启用断言而在部署时禁用断言。</li><li>使用断言是判断一个函数或对象的一个方法所产生的结果是否符合你期望那个结果。</li></ol><h2 id="七、新断言assertThat使用"><a href="#七、新断言assertThat使用" class="headerlink" title="七、新断言assertThat使用"></a>七、新断言assertThat使用</h2><p>JUnit 4.4 结合 Hamcrest 提供了一个全新的断言语法——assertThat。程序员可以只使用 assertThat 一个断言语句，结合 Hamcrest 提供的匹配符，就可以表达全部的测试思想。</p><p><strong>assertThat 的优点：</strong></p><p><strong>优点 1：</strong> 以前 JUnit 提供了很多的 assertion 语句，如：assertEquals，assertNotSame，assertFalse，assertTrue，assertNotNull，assertNull 等，现在有了 JUnit 4.4，一条 assertThat 即可以替代所有的 assertion 语句，这样可以在所有的单元测试中只使用一个断言方法，使得编写测试用例变得简单，代码风格变得统一，测试代码也更容易维护。</p><p><strong>优点 2：</strong> assertThat 使用了 Hamcrest 的 Matcher 匹配符，用户可以使用匹配符规定的匹配准则精确的指定一些想设定满足的条件，具有很强的易读性，而且使用起来更加灵活。</p><p><strong>优点 3：</strong> assertThat 不再像 assertEquals 那样，使用比较难懂的“谓宾主”语法模式（如：assertEquals(3, x);），相反，assertThat 使用了类似于“主谓宾”的易读语法模式（如：assertThat(x,is(3));），使得代码更加直观、易读。</p><p><strong>assertThat 的基本语法如下：</strong></p><pre><code>assertThat( [value], [matcher statement] );</code></pre><p><strong>value</strong> ：接下来想要测试的变量值；<strong>matcher statement</strong> ：使用 Hamcrest 匹配符来表达的对前面变量所期望的值的声明，如果 value 值与 matcher statement 所表达的期望值相符，则测试成功，否则测试失败。</p><h2 id="八、Postman与Spring-Boot-单元测试的区别"><a href="#八、Postman与Spring-Boot-单元测试的区别" class="headerlink" title="八、Postman与Spring Boot 单元测试的区别"></a>八、Postman与Spring Boot 单元测试的区别</h2><ol><li>Spring Boot的单元测试主要针对方法层面，可以测试Service层这类非对外暴露的接口的类中方法，并且可一次性批量测试多个方法、支持事务回滚。</li><li>Postman针对接口进行http测试，我平时这个比较多，创建的测试接口可保存、分类。</li></ol><h2 id="九、Postman基本用法"><a href="#九、Postman基本用法" class="headerlink" title="九、Postman基本用法"></a>九、Postman基本用法</h2><p>Postman是一款功能强大的网页调试与发送网页HTTP请求的工具。Postman能够发送任何类型的HTTP请求(GET, HEAD, POST,PUT..)，附带任何数量的参数和HTTP headers。支持不同的认证机制（basic, digest,OAuth），接收到的响应语法高亮（HTML，JSON或XML）。</p><p><strong>安装Postman</strong></p><p>官方网站：</p><p><a href="https://www.getpostman.com/apps">https://www.getpostman.com/apps</a></p><p><img src="https://7.dusays.com/2021/03/12/fb189913d88c3.png" alt="image-20210312140706367"></p><p>安装后，Postman是介样婶儿滴~~😊</p><p><img src="https://cdn.jsdelivr.net/gh/cayzlh/git-img-repository@master/2021/03/14044816155290881615529088535.jpg" alt="图片"></p>]]></content>
    
    
    <summary type="html">SpringBoot如何做单元测试？</summary>
    
    
    
    <category term="编程技术" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="转载" scheme="http://example.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/03/01/hello-world/"/>
    <id>http://example.com/2021/03/01/hello-world/</id>
    <published>2021-02-28T20:55:08.000Z</published>
    <updated>2021-02-28T20:55:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>API签名验证方案</title>
    <link href="http://example.com/2020/09/29/API%E7%AD%BE%E5%90%8D%E9%AA%8C%E8%AF%81%E6%96%B9%E6%A1%88/"/>
    <id>http://example.com/2020/09/29/API%E7%AD%BE%E5%90%8D%E9%AA%8C%E8%AF%81%E6%96%B9%E6%A1%88/</id>
    <published>2020-09-29T08:45:11.000Z</published>
    <updated>2021-04-10T06:06:49.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接口安全问题"><a href="#接口安全问题" class="headerlink" title="接口安全问题"></a>接口安全问题</h2><ul><li>请求身份是否合法？</li><li>请求参数是否被篡改？</li><li>请求是否唯一？</li></ul><h2 id="AccessKey-amp-SecretKey-（开放平台）"><a href="#AccessKey-amp-SecretKey-（开放平台）" class="headerlink" title="AccessKey&amp;SecretKey （开放平台）"></a>AccessKey&amp;SecretKey （开放平台）</h2><h3 id="请求身份"><a href="#请求身份" class="headerlink" title="请求身份"></a>请求身份</h3><p>为开发者分配**<code>AccessKey</code><strong>（开发者标识，确保唯一）和</strong><code>SecretKey</code>**（用于接口加密，确保不易被穷举，生成算法不易被猜测）。</p><h3 id="防止篡改"><a href="#防止篡改" class="headerlink" title="防止篡改"></a>防止篡改</h3><p><strong>参数签名</strong></p><ol><li>按照请求参数名的字母升序排列非空请求参数（包含<code>AccessKey</code>），使用<code>URL</code>键值对的格式（即<code>key1=value1&amp;key2=value2…</code>）拼接成字符串stringA；</li><li>在<code>stringA</code>最后拼接上<code>Secretkey</code>得到字符串<code>stringSignTemp</code>；</li><li>对<code>stringSignTemp</code>进行<code>MD5</code>运算，并将得到的字符串所有字符转换为大写，得到<code>sign</code>值。</li></ol><p>请求携带参数**<code>AccessKey</code><strong>和</strong><code>Sign</code><strong>，只有拥有合法的身份<code>AccessKey</code>和正确的签名<code>Sign</code>才能放行。这样就解决了身份验证和参数篡改问题，即使请求参数被劫持，由于获取不到<code>SecretKey</code>（</strong>仅作本地加密使用，不参与网络传输**），无法伪造合法的请求。</p><h3 id="重放攻击"><a href="#重放攻击" class="headerlink" title="重放攻击"></a>重放攻击</h3><p>虽然解决了请求参数被篡改的隐患，但是还存在着重复使用请求参数伪造二次请求的隐患。</p><p><strong>timestamp+nonce方案</strong></p><p><code>nonce</code>指<strong>唯一的随机字符串</strong>，用来标识每个被签名的请求。通过为每个请求提供一个唯一的标识符，服务器能够防止请求被多次使用（记录所有用过的<code>nonce</code>以阻止它们被二次使用）。</p><p>然而，对服务器来说永久存储所有接收到的<code>nonce</code>的代价是非常大的。可以使用**<code>timestamp</code>来优化<code>nonce</code>的存储**。</p><p>假设允许客户端和服务端最多能存在15分钟的时间差，同时追踪记录在服务端的<code>nonce</code>集合。当有新的请求进入时，首先检查携带的<code>timestamp</code>是否在15分钟内，如超出时间范围，则拒绝，然后查询携带的<code>nonce</code>，如存在已有集合，则拒绝。否则，记录该<code>nonce</code>，并删除集合内时间戳大于15分钟的<code>nonce</code>（可以使用<code>redis</code>的<code>expire</code>，新增<code>nonce</code>的同时设置它的超时失效时间为15分钟）。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-shell"><code class="language-shell">请求接口：http://api.test.com/test?name=hello&home=world&work=java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><u><strong>客户端</strong></u></p></li><li><ol><li><p>生成当前时间戳<code>timestamp=now</code>和唯一随机字符串<code>nonce=random</code></p></li><li><p>按照请求参数名的字母升序排列非空请求参数（包含<code>AccessKey</code>)：</p><p><code>stringA=&quot;AccessKey=access&amp;home=world&amp;name=hello&amp;work=java&amp;timestamp=now&amp;nonce=random&quot;;</code></p></li><li><p>拼接密钥<code>SecretKey</code>：</p><p><code>stringSignTemp=&quot;AccessKey=access&amp;home=world&amp;name=hello&amp;work=java&amp;timestamp=now&amp;nonce=random&amp;SecretKey=secret&quot;;</code></p></li><li><p><code>MD5</code>并转换为大写：</p><p><code>sign=MD5(stringSignTemp).toUpperCase();</code></p></li><li><p>最终请求：</p><p><code>http://api.test.com/test?name=hello&amp;home=world&amp;work=java&amp;timestamp=now&amp;nonce=nonce&amp;sign=sign;</code></p></li></ol></li><li><p><strong><u>服务端</u></strong></p><p><img src="https://gitee.com/cayzlh/img-repo/raw/master/2020/09/17024116013701611601370161045.png" alt="image-20200929170240504"></p></li></ul><h2 id="Token-amp-AppKey（APP）"><a href="#Token-amp-AppKey（APP）" class="headerlink" title="Token&amp;AppKey（APP）"></a>Token&amp;AppKey（APP）</h2><p>在<code>APP</code>开放<code>API</code>接口的设计中，由于大多数接口涉及到用户的个人信息以及产品的敏感数据，所以要对这些接口进行身份验证，为了安全起见让用户暴露的明文密码次数越少越好，然而客户端与服务器的交互在请求之间是无状态的，也就是说，当涉及到用户状态时，每次请求都要带上身份验证信息。</p><h3 id="Token身份验证"><a href="#Token身份验证" class="headerlink" title="Token身份验证"></a>Token身份验证</h3><ol><li>用户登录向服务器提供认证信息（如账号和密码），服务器验证成功后**返回<code>Token</code>**给客户端；</li><li>客户端将<code>Token</code>保存在本地，后续发起请求时，<strong>携带此Token</strong>；</li><li>服务器检查<code>Token</code>的有效性，有效则放行，无效（<code>Token</code>错误或过期）则拒绝。</li></ol><p><strong>安全隐患</strong>：<code>Token</code>被劫持，伪造请求和篡改参数。</p><h3 id="Token-AppKey签名验证"><a href="#Token-AppKey签名验证" class="headerlink" title="Token+AppKey签名验证"></a>Token+AppKey签名验证</h3><p>与上面开发平台的验证方式类似，为客户端分配**<code>AppKey</code><strong>（密钥，用于接口加密，不参与传输），将<code>AppKey</code>和所有请求参数组合成源串，根据</strong>签名算法<strong>生成签名值，发送请求时将签名值一起发送给服务器验证。这样，即使<code>Token</code>被劫持，对方不知道<code>AppKey</code>和签名算法，就无法伪造请求和篡改参数。再结合上述的</strong>重发攻击**解决方案，即使请求参数被劫持也无法伪造二次重复请求。</p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p><strong><u>登录和退出请求</u></strong></p><p><img src="https://gitee.com/cayzlh/img-repo/raw/master/2020/09/17105416013706541601370654137.png" alt="image-20200929171053770"></p><p><strong><u>后续请求</u></strong></p><ul><li><p>客户端 和上述开放平台的客户端行为类似，把<code>AccessKey</code>改为<code>token</code>即可。</p></li><li><p>服务端</p><p><img src="https://gitee.com/cayzlh/img-repo/raw/master/2020/09/17140816013708481601370848386.png" alt="image-20200929171408101"></p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>  <a href="https://mp.weixin.qq.com/s/QUaLa8oU4B1rCb-8FCs79g">芋道源码</a></li></ul>]]></content>
    
    
    <summary type="html">开放API接口签名验证，让你的接口从此不再裸奔</summary>
    
    
    
    <category term="笔记本" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="接口安全" scheme="http://example.com/tags/%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
